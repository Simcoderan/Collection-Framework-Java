package Java8Concepts.Operator;

import java.util.function.BinaryOperator;
import java.util.function.Function;

public class BinaryOperatorDemo {
    public static void main(String[] args) {
        BinaryOperator<Integer> add = (a, b) -> a + b;

        // ‚úÖ Now chain it with a Function that takes the result of addition
        Function<Integer, Integer> multiplyBy2 = result -> result * 2;

        // Compose: (a + b) ‚Üí then multiply the result by 2
        Function<Integer[], Integer> composed = inputs -> add
            .andThen(multiplyBy2)
            .apply(inputs[0], inputs[1]);

        System.out.println("Composed Result: " + composed.apply(new Integer[]{5, 3})); // Output: 16
    }
}


/**
 * =====================================================================
 * üîç WHAT IS BinaryOperator?
 * =====================================================================
 *
 * BinaryOperator<T> is a **specialized version of BiFunction** that takes
 * two arguments of the same type and returns a result of the same type.
 *
 * ‚û§ It's a functional interface in: java.util.function package
 *
 * ‚úÖ It's commonly used for operations like addition, multiplication,
 *    or any operation involving two operands of the same type.
 *
 * üìò Declaration in Java:
 *
 * @FunctionalInterface
 * public interface BinaryOperator<T> extends BiFunction<T, T, T> {
 * }
 */

/**
 * =====================================================
 * üîë JAVA 8 ‚Äì BINARY OPERATOR QUICK NOTES
 * =====================================================
 *
 * üîÅ BinaryOperator<T>
 * ‚û§ A functional interface that takes two inputs of type T
 *    and returns a result of the same type.
 * ‚û§ Signature: T apply(T t, T u)
 * ‚û§ Extends: BiFunction<T, T, T>
 * ‚û§ Package: java.util.function
 *
 * ‚úÖ When to Use?
 *   ‚û§ You need to perform an operation on two values of the same type.
 *   ‚û§ Common for operations like addition, subtraction, multiplication.
 *
 * üì¶ Real-Life Use Cases:
 *   - Mathematical operations (addition, multiplication)
 *   - Aggregating data (summing values)
 *   - Logical operations (AND, OR, etc.)
 *
 * ‚úÖ Benefits:
 *   - Simplifies code for operations with two operands of the same type
 *   - Promotes functional programming style with reusable logic
 */
