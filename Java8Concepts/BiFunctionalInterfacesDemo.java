package Java8Concepts;

import java.util.function.BiPredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;

public class BiFunctionalInterfacesDemo {
    public static void main(String[] args) {

        // ‚úÖ BIPREDICATE ‚Äì checks if sum of two numbers is even
        BiPredicate<Integer, Integer> isSumEven = (a, b) -> (a + b) % 2 == 0;

        // ‚úÖ BIFUNCTION ‚Äì returns concatenated string with sum
        BiFunction<Integer, Integer, String> formatSum = (a, b) -> "Sum is: " + (a + b);

        // ‚úÖ BICONSUMER ‚Äì prints formatted message and both numbers
        BiConsumer<String, Integer> printWithTag = (tag, value) -> 
            System.out.println(tag + " ‚û§ " + value);

        // Sample values
        int num1 = 10;
        int num2 = 15;

        // üéØ Combined usage
        if (isSumEven.test(num1, num2)) {
            String result = formatSum.apply(num1, num2);
            printWithTag.accept("‚úÖ Even Sum", num1 + num2);
        } else {
            printWithTag.accept("‚ùå Odd Sum", num1 + num2);
        }
    }
}


/**
 * ========================================================
 * üîë BI FUNCTIONAL INTERFACES ‚Äì CHEAT SHEET
 * ========================================================
 *
 * 1Ô∏è‚É£ BiPredicate<T, U>
 *    ‚û§ Method: boolean test(T t, U u)
 *    ‚û§ Use: Validate two inputs (e.g., compare, check sum)
 *
 * 2Ô∏è‚É£ BiFunction<T, U, R>
 *    ‚û§ Method: R apply(T t, U u)
 *    ‚û§ Use: Combine or transform two inputs (e.g., merge data)
 *
 * 3Ô∏è‚É£ BiConsumer<T, U>
 *    ‚û§ Method: void accept(T t, U u)
 *    ‚û§ Use: Perform action on two inputs (e.g., print both)
 *
 * ‚úÖ Useful in Map operations, data processing, and conditional logic.
 */
